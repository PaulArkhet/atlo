/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SubscribeImport } from './routes/subscribe'
import { Route as ScheduleImport } from './routes/schedule'
import { Route as ResourcesImport } from './routes/resources'
import { Route as PricingImport } from './routes/pricing'
import { Route as LoginImport } from './routes/login'
import { Route as JoinImport } from './routes/join'
import { Route as HowitworksImport } from './routes/howitworks'
import { Route as FaqImport } from './routes/faq'
import { Route as BenefitsImport } from './routes/benefits'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SubscribeRoute = SubscribeImport.update({
  id: '/subscribe',
  path: '/subscribe',
  getParentRoute: () => rootRoute,
} as any)

const ScheduleRoute = ScheduleImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => rootRoute,
} as any)

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const PricingRoute = PricingImport.update({
  id: '/pricing',
  path: '/pricing',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const JoinRoute = JoinImport.update({
  id: '/join',
  path: '/join',
  getParentRoute: () => rootRoute,
} as any)

const HowitworksRoute = HowitworksImport.update({
  id: '/howitworks',
  path: '/howitworks',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const BenefitsRoute = BenefitsImport.update({
  id: '/benefits',
  path: '/benefits',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/benefits': {
      id: '/benefits'
      path: '/benefits'
      fullPath: '/benefits'
      preLoaderRoute: typeof BenefitsImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/howitworks': {
      id: '/howitworks'
      path: '/howitworks'
      fullPath: '/howitworks'
      preLoaderRoute: typeof HowitworksImport
      parentRoute: typeof rootRoute
    }
    '/join': {
      id: '/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof JoinImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/pricing': {
      id: '/pricing'
      path: '/pricing'
      fullPath: '/pricing'
      preLoaderRoute: typeof PricingImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
    '/schedule': {
      id: '/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof ScheduleImport
      parentRoute: typeof rootRoute
    }
    '/subscribe': {
      id: '/subscribe'
      path: '/subscribe'
      fullPath: '/subscribe'
      preLoaderRoute: typeof SubscribeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/benefits': typeof BenefitsRoute
  '/faq': typeof FaqRoute
  '/howitworks': typeof HowitworksRoute
  '/join': typeof JoinRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/resources': typeof ResourcesRoute
  '/schedule': typeof ScheduleRoute
  '/subscribe': typeof SubscribeRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/benefits': typeof BenefitsRoute
  '/faq': typeof FaqRoute
  '/howitworks': typeof HowitworksRoute
  '/join': typeof JoinRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/resources': typeof ResourcesRoute
  '/schedule': typeof ScheduleRoute
  '/subscribe': typeof SubscribeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/benefits': typeof BenefitsRoute
  '/faq': typeof FaqRoute
  '/howitworks': typeof HowitworksRoute
  '/join': typeof JoinRoute
  '/login': typeof LoginRoute
  '/pricing': typeof PricingRoute
  '/resources': typeof ResourcesRoute
  '/schedule': typeof ScheduleRoute
  '/subscribe': typeof SubscribeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/benefits'
    | '/faq'
    | '/howitworks'
    | '/join'
    | '/login'
    | '/pricing'
    | '/resources'
    | '/schedule'
    | '/subscribe'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/benefits'
    | '/faq'
    | '/howitworks'
    | '/join'
    | '/login'
    | '/pricing'
    | '/resources'
    | '/schedule'
    | '/subscribe'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/benefits'
    | '/faq'
    | '/howitworks'
    | '/join'
    | '/login'
    | '/pricing'
    | '/resources'
    | '/schedule'
    | '/subscribe'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BenefitsRoute: typeof BenefitsRoute
  FaqRoute: typeof FaqRoute
  HowitworksRoute: typeof HowitworksRoute
  JoinRoute: typeof JoinRoute
  LoginRoute: typeof LoginRoute
  PricingRoute: typeof PricingRoute
  ResourcesRoute: typeof ResourcesRoute
  ScheduleRoute: typeof ScheduleRoute
  SubscribeRoute: typeof SubscribeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BenefitsRoute: BenefitsRoute,
  FaqRoute: FaqRoute,
  HowitworksRoute: HowitworksRoute,
  JoinRoute: JoinRoute,
  LoginRoute: LoginRoute,
  PricingRoute: PricingRoute,
  ResourcesRoute: ResourcesRoute,
  ScheduleRoute: ScheduleRoute,
  SubscribeRoute: SubscribeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/benefits",
        "/faq",
        "/howitworks",
        "/join",
        "/login",
        "/pricing",
        "/resources",
        "/schedule",
        "/subscribe"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/benefits": {
      "filePath": "benefits.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/howitworks": {
      "filePath": "howitworks.tsx"
    },
    "/join": {
      "filePath": "join.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/pricing": {
      "filePath": "pricing.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx"
    },
    "/schedule": {
      "filePath": "schedule.tsx"
    },
    "/subscribe": {
      "filePath": "subscribe.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
